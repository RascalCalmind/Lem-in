f = the parameter equal to the sum of two other parameters (g and h)
    each step we take the node with the lowest f.

g = the movement cost to move from the starting point to a given
    square on the grid, following the pad generated to get there.

h = the estimated movement cost to move from that given square
    on the grid to the final destination. This is often referred to 
    as the heuristic, which is nothing but a kind of smart guess.
    We really don't know the actual distance until we find the path,
    because all sorts of things can be in the way. There can me wany
    ways to calculate this 'h'.

Create two lists
- initialize the OPEN list
- initialize the CLOSED list
    put the starting node on the open list (you can leave its f at zero)
- While the open list is not empty
    - find the node with the least f on the open list, call it 'q'
    - pop q off the open list
    - generates q's 8 successors and set their parents to q
    - for each successors
        - if successor is the goal, stop search successor.g = q.g + distance
            between successor and q successor.h = distance from goal to successor
            successor.f = successor.g + successor.h
        - if a node with the same position as successor is in the OPEN list which
            has a lower f than successor, skip this successor.
        - if a node with the same position as successor is in the CLOSED list which
            has a lower f than successor, skip this successor otherwise, add the node
            to the open list end(for loop)
    - push q on the closed list end (while loop)


Calculating 'h''
- Exact Heuristics
    - pre-compute the distance between each pair of cells before running the A* Search algorithm
    - If there are no block cells/obstacles then we can just find the exact value of h without
        any pre-computation using the distance formula/Euclidean distance
- Approximation Heuristics
    - Manhattan distance
        - It is nothing but the sum of the absolute valyes of differences in the goal's
            x and y coordinattes and the current cell's x and y coordinates respectively
            h = abs (current_cell.x - goal.x) + abs (current_cell.y - goal.y)
            Use this one if you can only move left,right,up,down
    - Diagonal distance
        - It is nothing but the maximum absolute values of differences in the goal'same
            x and y coordinates and the current cell's x and y coordinates respectively
            h = max {abs (current_cell.x - goal.x), abs (current_cell.y - goal.y)}
            Use this one if you can only move in 8 directions so a straight diagonal
    - Euclidean distance
        - As it is clear from it's name, it is nothing but the distance between the current
            cell and the goal cell using the distance formula
            h = sqrt( (current_cell.x - goal.x)2 + (current_cell.y - goal.y)2 )
            use this if you can move in any direction.